variables:
  ImplementationPath: '$(System.DefaultWorkingDirectory)\implementation\'
  ContractsPath: '$(System.DefaultWorkingDirectory)\contracts\'
    
- powershell: |
    $Xml = "<?xml version=""1.0"" encoding=""utf-8""?>`n<packages>`n"
    $Contracts = ($env:BotBuilderDll)
    $Version = ($env:ApiCompatVersion)
    if ("$(Build.Reason)" -eq 'PullRequest') {
      $Libraries = $Contracts.Split(",")
      $UpdatedLibraries = [System.Collections.ArrayList]@()
      $UpdatedFiles = $(git diff HEAD HEAD~ --name-only)
      foreach ($UpdatedFile in $UpdatedFiles) {
        foreach ($Library in $Libraries) {
          if($UpdatedFile -like ('*/' + $Library + '/*')){
            $UpdatedLibraries.Add($Library)
          }
        }
      }
      $Contracts = $UpdatedLibraries.Join(',')
    }
    $Contracts.Split(",") | ForEach-Object {
      $Library = $_.Trim()
      $Xml += "  <package id=""" + $Library + """ version=""" + $Version + """/>`n"
    }
    $Xml += "</packages>"
    New-Item -Path $(System.DefaultWorkingDirectory) -Name "packages.config" -ItemType "file" -Value $Xml -Force
    Write-Host "##vso[task.setvariable variable=Contracts](($Contracts) -replace ",", ".dll ") + ".dll"
  displayName: 'Contracts setup'
  enabled: true

- task: NuGetCommand@2
  displayName: 'Install contracts'
  inputs:
  command: custom
  arguments: 'install $(System.DefaultWorkingDirectory)\packages.config -OutputDirectory $(System.DefaultWorkingDirectory)\nuget'

- powershell: |
    New-Item -ItemType directory -Path $ImplementationPath -Force
    $env:BotBuilderDll.Split(",") | ForEach {
        $library = $_.Trim()
        Get-ChildItem -Path "*/$library/bin/Release/netstandard2.0/$library.dll" -Recurse | Copy-Item -Destination $ImplementationPath -Force
        Get-ChildItem -Path "*/*/$library/bin/Release/netstandard2.0/$library.dll" -Recurse | Copy-Item -Destination $ImplementationPath -Force
    }
    If (!(Test-Path $(ContractsPath))) {
      New-Item -Path $(ContractsPath) -ItemType Directory
    }
    Copy-Item -Path "$(System.DefaultWorkingDirectory)\nuget\**\lib\netstandard2.0\*" -Destination $(ContractsPath) -Recurse -Force
  displayName: 'Binaries Comparer setup'

- task: SOUTHWORKS.binaries-comparer.custom-build-release-task.binaries-comparer@0
  displayName: 'Binaries Comparer run'
  inputs:
    contractsRootFolder: '$(ContractsPath)'
    contractsFileName: '$(Contracts)'
    implFolder: '$(ImplementationPath)'
    failOnIssue: true
    resolveFx: false
    generateLog: true
    outputFilename: 'results.txt'
    outputFolder: '$(System.DefaultWorkingDirectory)\binaries-comparer'
    useBaseline: false

# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#parameters-to-select-a-template-at-runtime
- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  variables:
    BinariesComparerResultFilePath: $(System.DefaultWorkingDirectory)\binaries-comparer\
    BinariesComparerResultFilename: results.txt
  - template: ci-publish-steps.yml

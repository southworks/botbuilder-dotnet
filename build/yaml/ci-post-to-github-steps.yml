steps:
- powershell: |
    $FilePath = "$(System.DefaultWorkingDirectory)/binaries-comparer"
    $FileName = "results.txt"
    $FileFullPath = $FilePath + $FileName
    $FileContent = @(Get-Content $FileFullPath)
    $result = ''
    $failed = $FALSE;
    ForEach ($line in $FileContent) {
      if ($line.StartsWith(':x:','CurrentCultureIgnoreCase')) {
        $failed = $TRUE
        $result += ":x: Found an incompatibility in at least one of all modified libraries:`n"
        $result += $line.Replace(":x: ", "") + "`n"
      } elseif ($failed) {
        $result += $line + "`n"
      } else {
        $firstIndex =  $line.IndexOf('**') + 2
        $lastIndex = $line.LastIndexOf('**')
        $libraries = $line.Substring($firstIndex, $lastIndex - $firstIndex).Split(' ')
        $result = ":heavy_check_mark: Found no incompatibilities for all modified libraries:`n"
        ForEach ($library in $libraries) {
          $libraryName = $library.Replace('.dll','') 
          $libraryName += " compared against [version $(ApiCompatVersion)](https://www.nuget.org/packages/$libraryName/$(ApiCompatVersion))"
          $result += '- ' + $libraryName + "`n"
        }
        break;
      }
    }
    Set-Content -Path $FileFullPath -Value $result
  displayName: 'Binaries Comparer format results'
  condition: and(succeededOrFailed(), eq(variables['Build.Reason'], 'PullRequest'))

- task: SOUTHWORKS.github-pr-comment.custom-publish-comment-task.github-pr-comment@0
  displayName: 'Binaries Comparer publish results'
  inputs:
    userToken: '$(GitHubCommentApiKey)'
    bodyFilePath: '$(Build.ArtifactStagingDirectory)\'
    getSubFolders: true
  condition: and(succeededOrFailed(), eq(variables['Build.Reason'], 'PullRequest'))
  
- powershell: |
    # Check for string in the logs in the current DevOps pipeline run.
    # Note: The task immediately before this one may not get checked because its log may not yet be available.
    # Calls the Azure DevOps REST API.
    # Enable OAuth token access in the pipeline agent job for $(System.Accesstoken) to populate.
    $stringToCheckFor = '201 Created';
    Start-Sleep -Milliseconds 1000 # Give time for the last log to become available
    
    $collectionUri = "$env:SYSTEM_COLLECTIONURI";  # e.g. 'https://fuselabs.visualstudio.com'
    $teamProjectId = "$env:SYSTEM_TEAMPROJECTID";  # e.g. '86659c66-c9df-418a-a371-7de7aed35064' = SDK_v4
    
    # Get the current build ID.
    $buildId = "$env:BUILD_BUILDID";
    Write-Host 'Build ID = ' $buildId;
    
    # Get the log containers for the run.
    $uri = "$collectionUri/$teamProjectId/_apis/build/builds/$buildId/logs";
    
    $token = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$(System.AccessToken)"));
    $header = @{authorization = "Basic $token"};
    
    $runLogContainers = Invoke-RestMethod "$uri" -Method Get -ContentType "application/json" -Headers $header;
    
    # Get the log from each log container.
    Write-Host 'Checking the logs:';
    $found = $false;
    foreach ($container in $runLogContainers.value) {
        $container.id;
        $uri = $container.url;
        $uri;
        $log = Invoke-RestMethod "$uri" -Method Get -ContentType "application/json" -Headers $header;
        
        # Search for our string.
        if (!$found -and $log.Contains($stringToCheckFor)) {
            $found = $true;
            $log;
            $mess = 'String "' + $stringToCheckFor + '" found in log #' + $container.id;
            Write-Host $mess;
        } else {
            ($log -split '\r?\n')[0] + '...';  # Print first line
        }
    }
    
    # If not found, throw an error.
    if (!$found) {
        Write-Host;
        $mess =  'Publish Compat Results failed. Is there a PR associated with this build? String "' + $stringToCheckFor + '" not found in the logs';
        throw $mess;
    }
  displayName: 'Verify publish'
  continueOnError: true
  condition: and(succeededOrFailed(), eq(variables['Build.Reason'], 'PullRequest'))

- script: |
   cd ..
   dir *.* /s
  displayName: 'Dir Workspace'
  continueOnError: true
  condition: succeededOrFailed()
  enabled: false

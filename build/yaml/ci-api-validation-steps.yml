variables:
  ImplementationPath: $(System.DefaultWorkingDirectory)\implementation\
  ContractsPath: $(System.DefaultWorkingDirectory)\contracts\

steps:
- powershell: |
  $Xml = "<?xml version=""1.0"" encoding=""utf-8""?>`n<packages>`n"
  $Contracts = "$(BotBuilderDll)"
  $Version = "$(ApiCompatVersion)"
  $Output = ""
  if ("$(Build.Reason)" -eq 'PullRequest') {
    $Libraries = $Contracts.Split(",")
    $UpdatedLibraries = [System.Collections.ArrayList]@()
    $UpdatedFiles = $(git diff HEAD HEAD~ --name-only)
    foreach ($UpdatedFile in $UpdatedFiles) {
      foreach ($Library in $Libraries) {
        if($UpdatedFile -like ('*/' + $Library + '/*')){
          $UpdatedLibraries.Add($Library)
        }
      }
    }
    if ($UpdatedLibraries.count -gt 0){
      $Contracts = $UpdatedLibraries.Join(',')
    } else {
      $Contracts = ""
    }
  }
  if($Contracts.length -gt 0){
    # Note: If $Contracts.length equals 0 Powershell's ForEach runs once.
    $Contracts.Split(",") | ForEach-Object {
      $Library = $_.Trim()
      $Xml += "  <package id=""" + $Library + """ version=""" + $Version + """/>`n"
    }
    $Xml += "</packages>"
    New-Item -Path $(System.DefaultWorkingDirectory) -Name "packages.config" -ItemType "file" -Value $Xml -Force
    $Output = ($Contracts -replace ",", ".dll ") + ".dll"
  }
  Write-Host "##vso[task.setvariable variable=Contracts]$Output"
displayName: 'Contracts setup'
condition: succeeded()

- task: NuGetCommand@2
  displayName: 'Install contracts'
  inputs:
    command: custom
    arguments: 'install $(System.DefaultWorkingDirectory)\packages.config -OutputDirectory $(System.DefaultWorkingDirectory)\nuget-installed'
  condition: and(succeeded(), ne(variables.Contracts, ''))

- powershell: |
    New-Item -Path $(ImplementationPath) -ItemType Directory -Force
    "$(BotBuilderDll)".Split(",") | ForEach {
        $library = $_.Trim()
        Get-ChildItem -Path "*/$library/bin/Release/netstandard2.0/$library.dll" -Recurse | Copy-Item -Destination $(ImplementationPath) -Force
        Get-ChildItem -Path "*/*/$library/bin/Release/netstandard2.0/$library.dll" -Recurse | Copy-Item -Destination $(ImplementationPath) -Force
    }
    If (!(Test-Path $(ContractsPath))) {
      New-Item -Path $(ContractsPath) -ItemType Directory
    }
    Copy-Item -Path "nuget-installed\**\lib\netstandard2.0\*" -Destination $(ContractsPath) -Recurse -Force
  displayName: 'Binaries Comparer setup'
  condition: and(succeeded(), ne(variables.Contracts, ''))

- task: SOUTHWORKS.binaries-comparer.custom-build-release-task.binaries-comparer@0
  displayName: 'Binaries Comparer run'
  inputs:
    contractsRootFolder: '$(ImplementationPath)'
    contractsFileName: '$(Contracts)'
    # implFolder does not accept trailing slash
    implFolder: '$(System.DefaultWorkingDirectory)/implementation'
    failOnIssue: true
    resolveFx: false
    generateLog: true
    outputFilename: 'results.txt'
    outputFolder: '$(System.DefaultWorkingDirectory)/binaries-comparer/'
    useBaseline: false
  condition: and(succeeded(), ne(variables.Contracts, ''))

- powershell: |
    $FilePath = "$(System.DefaultWorkingDirectory)/binaries-comparer/"
    $FileName = "results.txt"
    $FileFullPath = $FilePath + $FileName
    $FileContent = @(Get-Content $FileFullPath)
    $result = ''
    $failed = $FALSE;
    ForEach ($line in $FileContent) {
      if ($line.StartsWith(':x:','CurrentCultureIgnoreCase')) {
        $failed = $TRUE
        $result += ":x: Found an incompatibility in at least one of all modified libraries:`n"
        $result += $line.Replace(":x: ", "") + "`n"
      } elseif ($failed) {
        $result += $line + "`n"
      } else {
        $firstIndex =  $line.IndexOf('**') + 2
        $lastIndex = $line.LastIndexOf('**')
        $libraries = $line.Substring($firstIndex, $lastIndex - $firstIndex).Split(' ')
        $result = ":heavy_check_mark: Found no incompatibilities for all modified libraries:`n"
        ForEach ($library in $libraries) {
          $libraryName = $library.Replace('.dll','') 
          $libraryName += " compared against [version $(ApiCompatVersion)](https://www.nuget.org/packages/$libraryName/$(ApiCompatVersion))"
          $result += '- ' + $libraryName + "`n"
        }
        break;
      }
    }
    Set-Content -Path $FileFullPath -Value $result
  displayName: 'Binaries Comparer format results'
  condition: and(succeededOrFailed(), eq(variables['Build.Reason'], 'PullRequest'), ne(variables.Contracts, ''))

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Compat Results artifact'
#   inputs:
#     ArtifactName: '$(BotBuilderDll).$(ApiCompatVersion).CompatResults'

# - script: |
#     cd ..
#     dir /s
#   displayName: 'Dir workspace'
#   continueOnError: true
#   condition: succeededOrFailed()

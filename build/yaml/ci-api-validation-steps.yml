parameters:
  excludeClasses: []

steps:
- task: DownloadPipelineArtifact@1
  displayName: 'Download BotBuilderDLLs artifact'
  inputs:
    artifactName: 'BotBuilderDLLs-Debug-Windows-netcoreapp31'
    targetPath: '$(System.ArtifactsDirectory)/Artifacts'

- task: NuGetCommand@2
  displayName: 'NuGet Install of Compatability Target Package: $(BotBuilderDll)'
  inputs:
    command: custom
    arguments: 'install $(BotBuilderDll) -Version $(ApiCompatVersion) -OutputDirectory $(System.DefaultWorkingDirectory)\DownloadedNuGet'

- task: CmdLine@1
  displayName: 'Run dir'
  inputs:
    filename: dir
    arguments: '..\*.* /s'
  enabled: false

- task: SOUTHWORKS.binaries-comparer.custom-build-release-task.binaries-comparer@0
  displayName: 'Compare Binaries'
  inputs:
    contractsRootFolder: 'DownloadedNuGet\$(BotBuilderDll).$(ApiCompatVersion)\lib\netstandard2.0'
    contractsFileName: '$(BotBuilderDll).dll'
    implFolder: '$(System.ArtifactsDirectory)/Artifacts'
    failOnIssue: false
    resolveFx: false
    generateLog: true
    outputFilename: '$(BotBuilderDll).$(ApiCompatVersion).CompatResults.txt'
    outputFolder: '$(Build.ArtifactStagingDirectory)'
    useBaseline: true
    baselineFile: 'libraries/Microsoft.Bot.Builder/Inspection/InspectionMiddleware.cs'

# - powershell: |
#     $FileName = "$(Build.ArtifactStagingDirectory)\$(BotBuilderDll).$(ApiCompatVersion).CompatResults.txt"
#     if (Test-Path $FileName) {
#       $FileContent = @(Get-Content $FileName)

#       $FileContent[0] = $FileContent[0] + " compared against [version $(ApiCompatVersion)](https://www.nuget.org/packages/$(BotBuilderDll)/$(ApiCompatVersion))"
        
#       if ($FileContent.Length -eq 1) {
#         [system.io.file]::WriteAllText($FileName,$FileContent)
#       } else {
#         Set-Content $FileName $FileContent
#       }

#       Write-Host "The updated line 1: `n$FileContent[0]"
#     } else {
#       $FileContent = "The binary compatibility report for library '$(BotBuilderDll)' wasn't generated. This may have happened because the NuGet library '$(BotBuilderDll)' for version '$(ApiCompatVersion)' was unavailable or a connectivity issue."
#       New-Item -Path '$(Build.ArtifactStagingDirectory)' -Name '$(BotBuilderDll).$(ApiCompatVersion).CompatResults.txt' -ItemType "file" -Value $FileContent
#     }
#   displayName: 'Insert nuget link into ApiCompat results file.'
#   condition: succeededOrFailed()

- powershell: |
    $filePath = "$(Build.ArtifactStagingDirectory)\$(BotBuilderDll).$(ApiCompatVersion).CompatResults.txt"

    if (-not (Test-Path $filePath)) {
      $content = "The binary compatibility report for library '$(BotBuilderDll)' wasn't generated. This may have happened because the NuGet library '$(BotBuilderDll)' for version '$(ApiCompatVersion)' was unavailable or a connectivity issue."
      New-Item -Path '$(Build.ArtifactStagingDirectory)' -Name '$(BotBuilderDll).$(ApiCompatVersion).CompatResults.txt' -ItemType "file" -Value $content
      return;
    }

    $excludeClasses = "${{ parameters.excludeClasses }}".Split();

    if (-not $excludeClasses) {
      return;
    }

    $baseline = Get-Content $filePath -Raw;

    # When the Api Compat task has Binary compatibility issues, this process will filter out the Classes
    # and then validates if still exists remaining issues.
    if ($baseline.ToString().StartsWith(':x:')) {
      $content = ($baseline -split '<details\>|<\/details\>');
      $header = $content[0].SubString($content[0].IndexOf('Binary') - 1).Trim();
      $issues = $content[1].Trim();
      $issues = ($issues -replace '```', '').Split([Environment]::NewLine);

      # Filter out issues based on Class name.
      $issues = @(
        $issues | Where-Object {
          $line = $_
          if (-not $line.Trim()) {
            return $false
          }
          foreach ($class in $excludeClasses) {
            $pattern = "'$class";
            if ($line -match $pattern) { 
              return $false;
            }
          }
          return $true;
        } | ForEach-Object { $_.Trim() }
      )

      # Creates new file content.
      if ($issues) {
        $newFile = @();
        $newfile += (":x: $($issues.Length) $header compared against [version $(ApiCompatVersion)](https://www.nuget.org/packages/$(BotBuilderDll)/$(ApiCompatVersion)).");
        $newFile += '<details>';
        $newFile += '```';
        $newfile += $issues;
        $newFile += '```';
        $newFile += '</details>';
        
        $newFile = $newFile -join [Environment]::NewLine;
        Write-Host "##vso[task.complete result=Failed;]";
      }
      else {
        $newFile = ":heavy_check_mark: No Binary Compatibility issues for **$(BotBuilderDll)**";
      }

      $baseline = $newFile;
    }

    [system.io.file]::WriteAllText($filePath, $baseline);
    Write-Host "Compatibility Check:"; 
    $baseline;
  displayName: 'Evaluate Compatibility Check'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Compat Results artifact'
  inputs:
    ArtifactName: '$(BotBuilderDll).$(ApiCompatVersion).CompatResults'
  condition: succeededOrFailed()

- script: |
   cd ..
   dir /s
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()

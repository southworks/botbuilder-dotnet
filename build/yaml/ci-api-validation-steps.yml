steps:
- script: |
    git clone https://dev.azure.com/joelmut93/manx-pipeline-testing/_git/manx-pipeline-testing $(System.ArtifactsDirectory)/Artifacts
  displayName: 'Download DLLs'

- task: NuGetCommand@2
  displayName: 'NuGet Install of Compatability Target Package: $(BotBuilderDll)'
  inputs:
    command: custom
    arguments: 'install $(BotBuilderDll) -Version $(ApiCompatVersion) -OutputDirectory $(System.DefaultWorkingDirectory)\DownloadedNuGet'

- task: CmdLine@1
  displayName: 'Run dir'
  inputs:
    filename: dir
    arguments: '..\*.* /s'
  enabled: false

- task: SOUTHWORKS.binaries-comparer.custom-build-release-task.binaries-comparer@0
  displayName: 'Compare Binaries'
  inputs:
    contractsRootFolder: 'DownloadedNuGet\$(BotBuilderDll).$(ApiCompatVersion)\lib\netstandard2.0'
    contractsFileName: '$(BotBuilderDll).dll'
    implFolder: '$(System.ArtifactsDirectory)/Artifacts'
    failOnIssue: true
    resolveFx: false
    generateLog: true
    outputFilename: '$(BotBuilderDll).$(ApiCompatVersion).CompatResults.txt'
    outputFolder: '$(Build.ArtifactStagingDirectory)'
    useBaseline: false

- powershell: |
   $FileName = "$(Build.ArtifactStagingDirectory)\$(BotBuilderDll).$(ApiCompatVersion).CompatResults.txt"
   $FileContent = @(Get-Content $FileName)
    
   $FileContent[0] = $FileContent[0] + " compared against [version $(ApiCompatVersion)](https://www.nuget.org/packages/$(BotBuilderDll)/$(ApiCompatVersion))"
    
   if ($FileContent.Length -eq 1) {
   [system.io.file]::WriteAllText($fileName,$FileContent)
   } else {
   Set-Content $fileName $FileContent
   }
   
   Write-Host "The updated line 1: `n$FileContent[0]"
  displayName: 'Insert nuget link into ApiCompat results file.'

- powershell: |
   git clone https://dev.azure.com/joelmut93/manx-pipeline-testing/_git/api-compat-files $(System.DefaultWorkingDirectory)\..\outputLibraries
   $buildTarget = $env:BuildConfiguration.Split("-")[0];
   $env:BotBuilderDll.Split(",") | ForEach {
       $library = $_.Trim()
       Write-Host $library
       Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/*" -Recurse | Copy-Item -Destination '$(System.DefaultWorkingDirectory)\..\outputLibraries\' -Force
   }
  displayName: 'Prepare DLLs'
  condition: eq(variables['UploadDLLs'],'true')

- script: |
    git config --global user.name "botbuilder-dotnet-pipeline"
    git config --global user.email botbuilder-dotnet@pipeline.com

    cd $(System.DefaultWorkingDirectory)\..\outputLibraries
    git add .
    git commit -m 'test'
    git push
  displayName: 'Upload DLLs'
  condition: eq(variables['UploadDLLs'],'true')

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Compat Results artifact'
#   inputs:
#     ArtifactName: '$(BotBuilderDll).$(ApiCompatVersion).CompatResults'

- script: |
   cd ..
   dir /s
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()
